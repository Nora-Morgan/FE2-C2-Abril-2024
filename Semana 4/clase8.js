/* -------------------------------------------------------------------------- */
/*                      Validaci√≥n de FORMULARIOS                             */
/* -------------------------------------------------------------------------- */
// Validaci√≥n del lado del cliente:
// No se deber√≠a enviar informaci√≥n al servidor hasta que no sea verificada
// (campos obligatorios, formato correcto)

// Obtener los datos ingresados por el usuario a trav√©s de los atributos (value)
// de algunas etiquetas y ejecutar las acciones que correspondan 

/*
¬øQu√© hacer?
1. Capturar los datos del formulario
2. Escuchar el submit del form
3. Validar los datos
4. Mostrar errores (el feedback al usuario para que realice un ingreso correcto)
5. Mostrar un mensaje de "Formulario cargado con √©xito"
*/


/* -------------------------------------------------------------------------- */
/*               [1] FUNCION: capturar los datos del formulario               */
/* -------------------------------------------------------------------------- */
function capturarDatosFormulario() {
    // Establecer un objeto vac√≠o que contendr√° los datos del form
    // üëáüèº
    const objetoInformacion = {
        nombre: "",
        password: "",
        telefono: "",
        hobbies: [],
        nacionalidad: "",
    }
     
    // Seleccionar los nodos del dom

    // --------- Fieldset Datos
    // üëáüèº
    const nombre = document.querySelector("#nom");
    const password = document.querySelector("#pass");
    const telefono = document.querySelector("#tel");

    // --------- Fieldset Hobbies
    // üëáüèº
    const hobbies = document.querySelectorAll('[name=hobbies]');
    // console.log(hobbies);
    
    // --------- Fieldset Nacionalidad
    // üëáüèº
    const nacionalidad = document.querySelectorAll("[name=nacionalidad]");
    // console.log(nacionalidad);


    // Almacenar la informaci√≥n en el objeto preparado para ello
    // üëáüèº
    objetoInformacion.nombre = nombre.value;
    objetoInformacion.password = password.value;
    objetoInformacion.telefono = telefono.value;

    hobbies.forEach(function (hobbie) {
        if (hobbie.checked) {
            // para cada elemento, si est√° marcado el elemento se guarde en el array
            objetoInformacion.hobbies.push(hobbie.id);
        }
    })

    nacionalidad.forEach(function (nacion) {
        if (nacion.checked) {
            // la iteraci√≥n busca el elemento que est√© marcado
            objetoInformacion.nacionalidad = nacion.id
        }
    })
    console.log(objetoInformacion);
    return objetoInformacion;
}

/* -------------------------------------------------------------------------- */
/*                 [2] FUNCION: escuchar el submit del form                 */
/* -------------------------------------------------------------------------- */
// En un form, antes de hacer la validaci√≥n, se deber√° frenar el env√≠o por defecto

const form = document.querySelector("form");

form.addEventListener("submit", function (evento) {
    // Evitar el comportamiento por defecto
    evento.preventDefault();
    // console.log(evento);

    const datos = capturarDatosFormulario();
    const errores = validarInformacion(datos);
    renderizarErrores(errores);
    mostrarMensajeExito(errores);
})


/* ----------------------------- MESA DE TRABAJO ---------------------------- */
/* -------------------------------------------------------------------------- */
/*                         [3] FUNCION: validar datos                         */
/* -------------------------------------------------------------------------- */
/*
Desarrollar la funci√≥n validaci√≥n de datos.
Recibe un objeto con la misma estructura de obejetoInformacion
Debe realizar ciertas validaciones.
Retorna un listado de errores seg√∫n las comprobaciones que hace sobre el objeto:
1. Si el nombre no es un texto y tiene menos de 3 caracteres sumar el error:
    "El nombre debe tener al menos 3 caracteres."
2. Si la contrase√±a tiene menos de 6 caracteres,
sin contar espacios al principio, en el medio o final, sumar el error:
    "La contrase√±a debe tener al menos 6 caracteres, entre letras y s√≠mbolos."
3. Si el telefono tiene menos de 10 n√∫meros, sumar el error:
    "No es un tel√©fono v√°lido."
4. Si la lista de hobbies tiene m√°s de 4 items, sumar el error:
    "Se debe seleccionar al menos 1 hobbie y como m√°ximo seleccionar 4 hobbies."
5. Si no hay una nacionalidad definida, sumar el error:
    "Debe seleccionar una nacionalidad."
*/


// function validarInformacion(usuario) {
//     let errores = [];
//     // üëá desarrollar aqui la funcion

//     return errores;
// }

function validarInformacion(usuario) {
    let errores = [];   
    if (!isNaN(usuario.nombre) || usuario.nombre.length < 3) {
        errores.push("El nombre de usuario debe tener mas de 3 caracteres y no puede ser un n√∫mero")
    } 
    if (usuario.password.trim().length < 6) {
        errores.push("El password debe tener m√°s de 6 caracteres")
    }
    if (usuario.telefono.trim().length < 10) {
        errores.push("El telefono debe tener m√°s de 10 n√∫meros")
    }
    if (usuario.hobbies.length > 4 || usuario.hobbies.length == 0) {
        errores.push("Solo es posible seleccionar un m√°ximo de 4 hobbies, y como m√≠nimo 1");
    }
    if(usuario.nacionalidad == ""){
        errores.push("Se debe seleccionar una nacionalidad")
    }

    return errores;
}

/* -------------------------------------------------------------------------- */
/*                       [4] FUNCION: renderizar errores                      */
/* -------------------------------------------------------------------------- */

function renderizarErrores(listado) {
    const cajaErrores = document.querySelector("#errores");
    console.log(cajaErrores);

    if (cajaErrores) {
          cajaErrores.remove();
    }

    if (listado.length > 0) {
          const divTemplate = document.createElement('div');
          divTemplate.setAttribute("id", "errores");
          divTemplate.style = "background:rgba(255, 0, 0, 0.2);padding:.5em 1em;color: red;margin: .5em 0;";
          listado.forEach( function(error){
                divTemplate.innerHTML += `<p><span>${error}</span></p>`;
          })

          form.appendChild(divTemplate);
    }
}

/* -------------------------------------------------------------------------- */
/*                [5] FUNCION: Formulario completado con √©xito                */
/* -------------------------------------------------------------------------- */
// Esta funcion se va a encargar de mostrar que el formulario se complet√≥ correctamente.
// Para eso deber√° cumplir con los siguientes requerimientos.
// Recibe el listado de errores, y solo si no hay ninguno debe:
// 1 - mostrar al final del formulario un caja con la misma estructura
//     que la caja de errores, pero con la tonalidad verde
// 2 - dentro la caja debe mostrar un p√°rrafo con el mensaje:
//     "¬°Formulario completado con √©xito!"
// 3 - a su vez se debe deshabilitar el boton del formulario
// 4 - finalmente pasados 4 segundos:
//     se debe eliminar esa caja, habilitar el bot√≥n y limpiar el formulario

function mostrarMensajeExito(listado) {

    if (listado == 0) {
        const divTemplate = document.createElement('div');
        divTemplate.setAttribute("id", "exito");
        divTemplate.style = "background:rgba(0, 255, 0, 0.2);padding:.5em 1em;color: red;margin: .5em 0;";
        
        divTemplate.innerHTML = `<p><span>¬°Formulario completado con √©xito!</span></p>`;

        form.appendChild(divTemplate);

        const boton = document.querySelector("button");
        boton.setAttribute("disabled", "");

        const cajaExito = document.querySelector("#exito");

        setTimeout(() => {
            boton.removeAttribute("disabled");
            form.reset();
            cajaExito.remove();
        }, 4000);
    }
}